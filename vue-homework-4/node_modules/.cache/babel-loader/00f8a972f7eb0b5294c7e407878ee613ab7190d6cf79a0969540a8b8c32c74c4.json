{"ast":null,"code":"export default {\n  name: \"PaginatedList\",\n  data() {\n    return {\n      items: [],\n      // Данные для пагинации\n      currentPage: 1,\n      // Текущая страница для пагинации\n      itemsPerPage: 1,\n      // Количество элементов на страницу для пагинации\n      filterTerm: \"\",\n      // Термин для фильтрации\n      listItems: [],\n      // Данные для нового списка с фильтрацией\n      filteredItems: [] // Отфильтрованный список\n    };\n  },\n  methods: {\n    filterItems() {\n      this.filteredItems = this.listItems.filter(item => item.name.toLowerCase().includes(this.filterTerm.toLowerCase()));\n    }\n  },\n  computed: {\n    // Существующие вычисляемые свойства для пагинации\n    paginatedItems() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.items.slice(start, end);\n    },\n    totalPages() {\n      return Math.ceil(this.items.length / this.itemsPerPage);\n    }\n  },\n  mounted() {\n    // Инициализация данных для пагинации (существующий код)\n    this.items = Array.from({\n      length: 20\n    }, (v, k) => ({\n      id: k + 1,\n      name: `Элемент ${k + 1}`\n    }));\n\n    // Инициализация данных для нового списка с фильтрацией (новый код)\n    this.listItems = Array.from({\n      length: 20\n    }, (v, k) => ({\n      id: k + 1,\n      name: `Фрукт ${k + 1}`\n    }));\n\n    // Изначально показываем весь список\n    this.filteredItems = this.listItems;\n  }\n};","map":{"version":3,"names":["name","data","items","currentPage","itemsPerPage","filterTerm","listItems","filteredItems","methods","filterItems","filter","item","toLowerCase","includes","computed","paginatedItems","start","end","slice","totalPages","Math","ceil","length","mounted","Array","from","v","k","id"],"sources":["C:\\Users\\admin\\Desktop\\js-homework\\vue-homework-4\\src\\components\\PaginatedList.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-4\">\r\n    <!-- Пагинация (существующий код, не трогаем) -->\r\n    <ul class=\"list-group\">\r\n      <li class=\"list-group-item\" v-for=\"item in paginatedItems\" :key=\"item.id\">\r\n        {{ item.name }}\r\n      </li>\r\n    </ul>\r\n    <nav class=\"mt-4\">\r\n      <ul class=\"pagination\">\r\n        <li class=\"page-item\" v-for=\"page in totalPages\" :key=\"page\" :class=\"{active: page === currentPage}\">\r\n          <button class=\"page-link\" @click=\"currentPage = page\">\r\n            {{page}}\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n\r\n    <!-- Новый список с фильтрацией (новый код) -->\r\n    <div class=\"mt-4\">\r\n      <input type=\"text\" v-model=\"filterTerm\" class=\"form-control\" placeholder=\"Фильтровать элементы\" @input=\"filterItems\"/>\r\n      <ul class=\"list-group mt-3\">\r\n        <li\r\n            class=\"list-group-item\"\r\n            v-for=\"item in filteredItems\"\r\n            :key=\"item.id\"\r\n        >\r\n          {{ item.name }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nexport default {\r\n  name: \"PaginatedList\",\r\n  data() {\r\n    return {\r\n      items: [], // Данные для пагинации\r\n      currentPage: 1, // Текущая страница для пагинации\r\n      itemsPerPage: 1, // Количество элементов на страницу для пагинации\r\n      filterTerm: \"\", // Термин для фильтрации\r\n      listItems: [], // Данные для нового списка с фильтрацией\r\n      filteredItems: [] // Отфильтрованный список\r\n    };\r\n  },\r\n  methods: {\r\n    filterItems() {\r\n      this.filteredItems = this.listItems.filter(item =>\r\n          item.name.toLowerCase().includes(this.filterTerm.toLowerCase())\r\n      );\r\n    }\r\n  },\r\n  computed: {\r\n    // Существующие вычисляемые свойства для пагинации\r\n    paginatedItems() {\r\n      const start = (this.currentPage - 1) * this.itemsPerPage;\r\n      const end = start + this.itemsPerPage;\r\n      return this.items.slice(start, end);\r\n    },\r\n    totalPages() {\r\n      return Math.ceil(this.items.length / this.itemsPerPage);\r\n    }\r\n  },\r\n  mounted() {\r\n    // Инициализация данных для пагинации (существующий код)\r\n    this.items = Array.from({ length: 20 }, (v, k) => ({\r\n      id: k + 1,\r\n      name: `Элемент ${k + 1}`\r\n    }));\r\n\r\n    // Инициализация данных для нового списка с фильтрацией (новый код)\r\n    this.listItems = Array.from({ length: 20 }, (v, k) => ({\r\n      id: k + 1,\r\n      name: `Фрукт ${k + 1}`\r\n    }));\r\n\r\n    // Изначально показываем весь список\r\n    this.filteredItems = this.listItems;\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.pagination .active .page-link {\r\n  background-color: #007bff;\r\n  color: white;\r\n  border-color: #007bff;\r\n}\r\n/* Дополнительные стили можно добавить при необходимости */\r\n</style>\r\n"],"mappings":"AAoCA,eAAe;EACbA,IAAI,EAAE,eAAe;EACrBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MAAE;MACXC,WAAW,EAAE,CAAC;MAAE;MAChBC,YAAY,EAAE,CAAC;MAAE;MACjBC,UAAU,EAAE,EAAE;MAAE;MAChBC,SAAS,EAAE,EAAE;MAAE;MACfC,aAAa,EAAE,EAAC,CAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACF,aAAY,GAAI,IAAI,CAACD,SAAS,CAACI,MAAM,CAACC,IAAG,IAC1CA,IAAI,CAACX,IAAI,CAACY,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACR,UAAU,CAACO,WAAW,CAAC,CAAC,CAClE,CAAC;IACH;EACF,CAAC;EACDE,QAAQ,EAAE;IACR;IACAC,cAAcA,CAAA,EAAG;MACf,MAAMC,KAAI,GAAI,CAAC,IAAI,CAACb,WAAU,GAAI,CAAC,IAAI,IAAI,CAACC,YAAY;MACxD,MAAMa,GAAE,GAAID,KAAI,GAAI,IAAI,CAACZ,YAAY;MACrC,OAAO,IAAI,CAACF,KAAK,CAACgB,KAAK,CAACF,KAAK,EAAEC,GAAG,CAAC;IACrC,CAAC;IACDE,UAAUA,CAAA,EAAG;MACX,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACnB,KAAK,CAACoB,MAAK,GAAI,IAAI,CAAClB,YAAY,CAAC;IACzD;EACF,CAAC;EACDmB,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACrB,KAAI,GAAIsB,KAAK,CAACC,IAAI,CAAC;MAAEH,MAAM,EAAE;IAAG,CAAC,EAAE,CAACI,CAAC,EAAEC,CAAC,MAAM;MACjDC,EAAE,EAAED,CAAA,GAAI,CAAC;MACT3B,IAAI,EAAE,WAAW2B,CAAA,GAAI,CAAC;IACxB,CAAC,CAAC,CAAC;;IAEH;IACA,IAAI,CAACrB,SAAQ,GAAIkB,KAAK,CAACC,IAAI,CAAC;MAAEH,MAAM,EAAE;IAAG,CAAC,EAAE,CAACI,CAAC,EAAEC,CAAC,MAAM;MACrDC,EAAE,EAAED,CAAA,GAAI,CAAC;MACT3B,IAAI,EAAE,SAAS2B,CAAA,GAAI,CAAC;IACtB,CAAC,CAAC,CAAC;;IAEH;IACA,IAAI,CAACpB,aAAY,GAAI,IAAI,CAACD,SAAS;EACrC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}