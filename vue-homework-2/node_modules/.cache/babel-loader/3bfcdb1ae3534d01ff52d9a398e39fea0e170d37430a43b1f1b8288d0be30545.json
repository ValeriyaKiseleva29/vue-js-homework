{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.toggleState && $setup.toggleState(...args))\n  }, \"Изменить состояние\"), _createElementVNode(\"p\", null, \"Текущее состояние: \" + _toDisplayString($setup.state), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","onClick","_cache","args","$setup","toggleState","_toDisplayString","state"],"sources":["C:\\Users\\admin\\Desktop\\js-homework\\vue-project-2\\src\\components\\ToggleComponent.vue"],"sourcesContent":["<script>\r\nimport {ref} from \"vue\";\r\nexport default {\r\n  setup(){\r\n    const state = ref ('Начальное состояние');\r\n    const toggleState = () => {\r\n      state.value = state.value === 'Начальное состояние'\r\n          ? 'Состояние изменено'\r\n          : 'Начальное состояние';\r\n  };\r\n    const formData = ref ('');\r\n    const errorMessage = ref ('');\r\n    const validateForm = () => {\r\n      if (formData.value.trim() === ''){\r\n        errorMessage.value = 'Поле не может быть пустым';\r\n      } else if (formData.value.length < 5){\r\n        errorMessage.value = 'Длинна текста должна быть не меньше 5 символов';\r\n      } else {\r\n        errorMessage.value = '';\r\n        alert(errorMessage.value);\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return {\r\n      state,\r\n      toggleState\r\n    };\r\n  }\r\n};\r\n\r\n</script>\r\n\r\n<template>\r\n<div>\r\n  <button @click=\"toggleState\">Изменить состояние</button>\r\n  <p>Текущее состояние: {{state}}</p>\r\n</div>\r\n</template>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":";;uBAmCAA,mBAAA,CAGM,cAFJC,mBAAA,CAAwD;IAA/CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,WAAA,IAAAD,MAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,oBAAkB,GAC/CH,mBAAA,CAAmC,WAAhC,qBAAmB,GAAAM,gBAAA,CAAEF,MAAA,CAAAG,KAAK,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}